swagger: "2.0"
info:
  version: 1.0.1
  title: "Document Manager"
  description: A API to for Documents. All DateTime should be in ISO 8601 format.
  contact:
    name: ILI-258
    url: https://ili-258.slack.com
host: docark.hochfarber.com
basePath: /api/v1/
securityDefinitions:
  OAuth2:
    type: oauth2
    # This should be updated to the Token URL of your OAuth provider.
    tokenUrl: http://example.com/oauth/token
    # This should be updated to the Authorization URL of your OAuth provider.
    authorizationUrl: http://example.com/oauth/auth
    flow: accessCode
    scopes:
      write: allows modifying resources
      read: allows reading resources
      delete: allows deleting resources

schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json

paths:
  /folders:
    get:
      description: |
        Returns all the folders the user has access to. If parameters are provided,
        it will return a subset of the folders the user has access, that match the conditions given .
        If multiples parameters are given, they are joined
        by a AND expresion. Example Query params => name=paralelo&id_parent_folder=-1,4
        should return any folder with name similar to "paralelo", and its in either
        the "root" folder (-1) or in the folder with id=4
      operationId: findFolders
      security:
        - OAuth2: [read]
      parameters:
        - name: name
          in: query
          description: name to filter by. It's case insensitive
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string
        - name: id_parent_folder
          in: query
          description: Parent folder ID to filter by
          required: false
          type: array
          collectionFormat: csv
          items:
            type: number
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: number
        - name: offset
          in: query
          description: offset for the  results to return
          required: false
          type: number

      responses:
        200:
          description: folders response
          schema:
            type: array
            items:
              $ref: '#/definitions/Read_Folder'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a folder.  Duplicates are NOT allowed
      operationId: GetFolder by Id
      security:
        - OAuth2: [write]
      parameters:
        - name: folder
          in: body
          description: Folder to create
          required: true
          schema:
            $ref: '#/definitions/Post_Folder'
      responses:
        200:
          description: Folder response
          schema:
            $ref: '#/definitions/Metadata_Folder'
        400:
          description: Bad Request, use in case of any bad request, specially if the request specifies a non existant id_parent_folder
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict - Duplicated Name
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /folders/{id}:
    get:
      description: Returns folder based on a single ID
      operationId: findFolder by ID
      security:
        - OAuth2: [read]
      parameters:
        - name: id
          in: path
          description: ID of folder to fetch
          required: true
          type: number
      responses:
        200:
          description: folder response
          schema:
            $ref: '#/definitions/Read_Folder'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      description: Updates a folder.
      operationId: Update folder by Id
      security:
        - OAuth2: [write]
      parameters:
        - name: id
          in: path
          description: ID of folder to PATCH
          required: true
          type: number
        - name: folder
          in: body
          description: Folder to create
          required: true
          schema:
            $ref: '#/definitions/Patch_Folder'
      responses:
        200:
          description: Folder response
          schema:
            $ref: '#/definitions/Read_Folder'
        400:
          description: Bad Request, use in case of any bad request, specially if the request specifies a non existant id_parent_folder
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict - Duplicated Name
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: deleteFolder
      description: Deletes a single folder based on the ID supplied, only if folder is empty if the folder is NOT empty, the user must provide the param force, to recursively delete ALL its contents.
      security:
        - OAuth2: [delete]
      parameters:
        - name: id
          in: path
          description: ID of folder to delete
          required: true
          type: number
        - name: force
          in: query
          description: WARNING Force the Folder deletion, even if not empty
          type: number
          enum: [0,1]
      responses:
        204:
          description: folder deleted
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        403:
          description: folder not deleted because the folder is not empty
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files:
    get:
      description: |
        Returns all the files the user has access to. If parameters are provided,
        it will return a subset of the files the user has access, that match the conditions given.
        If multiples parameters are given, they are joined by a AND expresion.
        Example Query params => name=paralelo&id_parent_folder=-1,4
        should return any folder with name similar to "paralelo", and its in either
        the "root" folder (-1) or in the folder with id=4

      operationId: findFiles
      security:
        - OAuth2: [read]
      parameters:
        - name: name
          in: query
          description: name to filter by. It's case insensitive
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string
        - name: id_parent_folder
          in: query
          description: parent folder IDs to filter by
          required: false
          type: array
          collectionFormat: csv
          items:
            type: number
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: number
        - name: offset
          in: query
          description: offset for the  results to return
          required: false
          type: number
      responses:
        200:
          description: files response
          schema:
            type: array
            items:
              $ref: '#/definitions/File'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Uploads a file.
      operationId: uploadFile
      security:
        - OAuth2: [write]
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: upfile
          type: file
          required: true
          description: The file to upload. Maximum size 5 MB
        - in: formData
          name: name
          type: string
          description: The name of the file to upload.
        - in: formData
          name: id_parent_folder
          type: number
          description: The id of the folder where to upload the file.
      responses:
        200:
          description: file creation response
          schema:
              $ref: '#/definitions/File'
        400:
          description: Bad Request, use in case of any bad request, specially if the request specifies a non existant id_parent_folder
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict - Duplicated Name
          schema:
            $ref: '#/definitions/Error'
        413:
          description: Uploaded File is too large, maximum size is 5 MB
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{id}:
    get:
      description: Returns folder based on a single ID
      operationId: findFile by ID
      security:
        - OAuth2: [read]
      parameters:
        - name: id
          in: path
          description: ID of File to fetch
          required: true
          type: number
      responses:
        200:
          description: folder response
          schema:
            $ref: '#/definitions/File'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      description: Updates a File Metadata.
      operationId: Update File Metadata by Id
      security:
        - OAuth2: [write]
      parameters:
        - name: id
          in: path
          description: ID of file to update
          required: true
          type: number
        - name: folder
          in: body
          description: Folder to create
          required: true
          schema:
            $ref: '#/definitions/Write_File'
      responses:
        200:
          description: Folder response
          schema:
            $ref: '#/definitions/File'
        400:
          description: Bad Request, use in case of any bad request, specially if the request specifies a non existant id_parent_folder
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Uploads a new version of the file.
      operationId: Upload New File Version
      security:
        - OAuth2: [write]
      consumes:
        - multipart/form-data
      parameters:
        - name: id
          in: path
          description: ID of file to update
          required: true
          type: number
        - in: formData
          name: upfile
          type: file
          required: true
          description: The file to upload. Maximum size 5 MB
      responses:
        200:
          description: file creation response
          schema:
            $ref: '#/definitions/File'
        400:
          description: Bad Request, use in case of any bad request, specially if the request specifies a non existant id_parent_folder
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/Error'
        413:
          description: Uploaded File is too large, maximum size is 5 MB
          schema:
            $ref: '#/definitions/Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: deletes a single folder based on the ID supplied, only if folder is empty.
      operationId: deleteFile
      security:
        - OAuth2: [delete]
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          type: number
      responses:
        204:
          description: folder deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'



definitions:

  Read_Folder:
    required:
      - id
      - name
      - id_parent_folder
      - full_path
      - created_at
      - created_by
      - updated_at
      - updated_by
      - contents
    properties:
      id:
        type: number
      name:
        type: string
      id_parent_folder:
        type: number
      full_path:
        type: string
      created_at:
        type: string
        format: date-time
      created_by:
        type: string
      updated_at:
        type: string
        format: date-time
      updated_by:
        type: string
      contents:
        type: array
        items:
          $ref: '#/definitions/Object'
  Metadata_Folder:
    required:
      - id
      - name
      - id_parent_folder
      - full_path
      - created_at
      - created_by
      - updated_at
      - updated_by
    properties:
      id:
        type: number
      name:
        type: string
      id_parent_folder:
        type: number
      full_path:
        type: string
      created_at:
        type: string
        format: date-time
      created_by:
        type: string
      updated_at:
        type: string
        format: date-time
      updated_by:
        type: string
  Post_Folder:
    required:
      - name
    properties:
      name:
        type: string
      id_parent_folder:
        type: number
  Patch_Folder:
    properties:
      name:
        type: string
      id_parent_folder:
        type: number
  Object:
    required:
      - id
      - name
      - type
      - url
    properties:
      id:
        type: number
      name:
        type: string
      type:
        type: number
        description: isfolder? Can be 0 or 1
        enum: [0,1]
      url:
        type: string
        description: path to object

  File:
    required:
      - id
      - name
      - id_parent_folder
      - access_url
      - expiration_date
      - size
      - version
    properties:
      id:
        type: number
      name:
        type: string
      id_parent_folder:
        type: number
      created_at:
        type: string
        format: date-time
      created_by:
        type: string
      updated_at:
        type: string
        format: date-time
      updated_by:
        type: string
      access_url:
        type: string
      expiration_date:
        type: string
        format: date-time
      size:
        type: integer
        format: int32
        description: Size in Bytes
      full_path:
        type: string
        description: Human readable full path.
      version:
        type: integer
        description: Version Number of the file. If Versioning is not implemented, MUST be 1
  Write_File:
    required:
      - id_parent_folder
    properties:
      id_parent_folder:
        type: number
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        description: Must be the same as the http code
      message:
        type: string
        description: A short explanation of the reason of the error
